---
import Layout from "../layouts/Layout.astro";
---

<Layout title="hello">
  <div id="container" class="bg-slate-700 w-full h-full">
    <div
      id="circle"
      class="w-64 h-64 overflow-hidden rounded-full leading-none text-xs -tracking-wider uppercase ring ring-sky-200"
      style="transform:translate3d(300px,300px,0)"
    >
      <div
        id="circle-inner"
        class="w-64 h-64 grid place-content-center"
        style="background:#aaaaaa"
      >
        circle
      </div>
    </div>
  </div>
</Layout>
<script>
  const getRandomAlphaNumeric = () => {
    const alphaNumeric = "0123456789abcdef";
    const out = alphaNumeric[Math.floor(Math.random() * alphaNumeric.length)];
    // console.log("out", out, Math.random() * alphaNumeric.length);
    return out;
  };
  const randomHex = () => {
    return `#${getRandomAlphaNumeric()}${getRandomAlphaNumeric()}${getRandomAlphaNumeric()}${getRandomAlphaNumeric()}${getRandomAlphaNumeric()}${getRandomAlphaNumeric()}`;
  };
  const getDirection = () => {
    const x = Math.random() > 0.5 ? 1 : -1;
    // const x = Math.random() * xDir;
    const y = Math.random() > 0.5 ? 1 : -1;
    // const y = Math.random() * yDir;
    return { x, y };
  };
  const isOutOfBound = (
    obj: DOMRect,
    container: DOMRect
  ):
    | {
        outOfBound: true;
        bound: "right";
      }
    | {
        outOfBound: true;
        bound: "left";
      }
    | {
        outOfBound: true;
        bound: "top";
      }
    | {
        outOfBound: true;
        bound: "bottom";
      }
    | { outOfBound: false } => {
    if (obj.right >= container.width) {
      return { outOfBound: true, bound: "right" };
    }
    if (obj.left <= container.left) {
      return { outOfBound: true, bound: "left" };
    }
    if (obj.top <= container.top) {
      return { outOfBound: true, bound: "top" };
    }
    if (obj.bottom >= container.height) {
      return { outOfBound: true, bound: "bottom" };
    }
    return { outOfBound: false };
  };
  document.addEventListener("DOMContentLoaded", () => {
    const circle = document.getElementById("circle");
    const circleInner = document.getElementById("circle-inner");
    const container = document.getElementById("container");
    type FRC = Parameters<typeof window.requestAnimationFrame>[0];
    if (!circle || !container || !circleInner) return;

    const speed = 3;

    let direction = getDirection();
    const containerBounding = container.getBoundingClientRect();
    console.log(containerBounding, getDirection());
    const step = (timeStamp: EpochTimeStamp) => {
      const circleBounding = circle.getBoundingClientRect();

      const countX =
        direction.x > 0
          ? Math.min(circleBounding.x + speed, containerBounding.width)
          : Math.max(circleBounding.x - speed, containerBounding.left);
      const countY =
        direction.y > 0
          ? Math.min(circleBounding.y + speed, containerBounding.height)
          : Math.max(circleBounding.y - speed, containerBounding.top);
      circle.style.transform = `translate3d(${countX}px,${countY}px,0)`;

      const isOut = isOutOfBound(circleBounding, containerBounding);
      if (isOut.outOfBound === true) {
        circleInner.style.background = randomHex();

        if (isOut.bound === "right") {
          direction = { ...direction, x: -1 };
        }
        if (isOut.bound === "left") {
          direction = { ...direction, x: 1 };
        }
        if (isOut.bound === "bottom") {
          direction = { ...direction, y: -1 };
        }
        if (isOut.bound === "top") {
          direction = { ...direction, y: 1 };
        }
        // console.log("hex", randomHex());
      }

      window.requestAnimationFrame(step);
      // }
    };

    window.requestAnimationFrame(step);
  });
</script>
